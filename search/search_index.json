{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"01Applikation_Inbetriebnahme/","text":"01 Applikation Inbetriebnahme Download Der Sourcecode von order-management wird mit Git verwaltet. Als Plattform wird www.github.com verwendet. Um den Sourcecode herunter zu laden kann entweder dieser Command ausgef\u00fchrt werden: git clone https://github.com/ricardo17coelho/order-management.git Oder er kann von folgender URL manuell als .zip heruntergeladen werden: https://github.com/ricardo17coelho/order-management Datenbank Order-Management braucht zwingend eine laufende MSSQL-Datenbank, die auf dem gleichen Host l\u00e4uft, wie die Applikation. Der angemeldete Windows-User muss sich zwingend mit dieser Datenbank verbinden d\u00fcrfen. (Trusted_Connection=True) Bevor man die Applikation startet, muss man die Datenbank vorbereiten. Daf\u00fcr sollte das Visual Studio Projekt ge\u00f6ffnet werden und in der Package Manager Console folgender Command ausgef\u00fchrt werden: Update-Database Dies generiert die n\u00f6tigen Tabellen mit allen dazugeh\u00f6rigen Spalten und Beziehungen. Testdaten Dieser Command generiert nicht nur s\u00e4mtliche Tabellen, sondern auch einige Testdaten, damit order-management dann auch getestet werden kann. Dies wurde in der Methode onModelCreating() im DbContext implementiert.","title":"01 Applikation Inbetriebnahme"},{"location":"01Applikation_Inbetriebnahme/#01-applikation-inbetriebnahme","text":"","title":"01 Applikation Inbetriebnahme"},{"location":"01Applikation_Inbetriebnahme/#download","text":"Der Sourcecode von order-management wird mit Git verwaltet. Als Plattform wird www.github.com verwendet. Um den Sourcecode herunter zu laden kann entweder dieser Command ausgef\u00fchrt werden: git clone https://github.com/ricardo17coelho/order-management.git Oder er kann von folgender URL manuell als .zip heruntergeladen werden: https://github.com/ricardo17coelho/order-management","title":"Download"},{"location":"01Applikation_Inbetriebnahme/#datenbank","text":"Order-Management braucht zwingend eine laufende MSSQL-Datenbank, die auf dem gleichen Host l\u00e4uft, wie die Applikation. Der angemeldete Windows-User muss sich zwingend mit dieser Datenbank verbinden d\u00fcrfen. (Trusted_Connection=True) Bevor man die Applikation startet, muss man die Datenbank vorbereiten. Daf\u00fcr sollte das Visual Studio Projekt ge\u00f6ffnet werden und in der Package Manager Console folgender Command ausgef\u00fchrt werden: Update-Database Dies generiert die n\u00f6tigen Tabellen mit allen dazugeh\u00f6rigen Spalten und Beziehungen.","title":"Datenbank"},{"location":"01Applikation_Inbetriebnahme/#testdaten","text":"Dieser Command generiert nicht nur s\u00e4mtliche Tabellen, sondern auch einige Testdaten, damit order-management dann auch getestet werden kann. Dies wurde in der Methode onModelCreating() im DbContext implementiert.","title":"Testdaten"},{"location":"02Unser_Vorgehen/","text":"02 Unser Vorgehen Sourcecode Versionierung Uns war von Anfang an klar, dass wir den Sourcecode mit Git auf Github verwalten wollten. Kanban Als zus\u00e4tzliche Hilfe f\u00fcr die \u00dcbersicht der Tasks verwendeten wir ein Kanban-Board auf www.trello.com. Anfangs definierten wir einige Tasks und teilten sie einander zu. Die ersten Tasks waren: Ricardo: GIT Repo erstellen Ricardo: GUI Mockups erstellen Raphael: ERM erstellen Ricardo: Dashboard (Homescreen) erstellen Raphael: S\u00e4mtliche Entity Models erstellen Danach erstellten wir immer weitere Tasks, priorisierten sie und teilten sie einander zu. Dies ist nur ein kleiner Ausschnitt von unserem Kanban-Board:","title":"02 Unser Vorgehen"},{"location":"02Unser_Vorgehen/#02-unser-vorgehen","text":"","title":"02 Unser Vorgehen"},{"location":"02Unser_Vorgehen/#sourcecode-versionierung","text":"Uns war von Anfang an klar, dass wir den Sourcecode mit Git auf Github verwalten wollten.","title":"Sourcecode Versionierung"},{"location":"02Unser_Vorgehen/#kanban","text":"Als zus\u00e4tzliche Hilfe f\u00fcr die \u00dcbersicht der Tasks verwendeten wir ein Kanban-Board auf www.trello.com. Anfangs definierten wir einige Tasks und teilten sie einander zu. Die ersten Tasks waren: Ricardo: GIT Repo erstellen Ricardo: GUI Mockups erstellen Raphael: ERM erstellen Ricardo: Dashboard (Homescreen) erstellen Raphael: S\u00e4mtliche Entity Models erstellen Danach erstellten wir immer weitere Tasks, priorisierten sie und teilten sie einander zu. Dies ist nur ein kleiner Ausschnitt von unserem Kanban-Board:","title":"Kanban"},{"location":"03UI/","text":"03 UI Mockups vs Endergebnis Warum abweicht unser Endprodukt von erstellten Mockups? Am Anfang wollten wir ein einfaches Design f\u00fcr all die Views gestalten und mit Hilfe von verschiedener Farbe, die \u00abviews\u00bb unterscheiden. Jedoch haben wir schnell gemerkt, dass WindowsForms sehr limitiert ist. Sowohl ich als auch Raphael sind daran gewohnt mit guten Frameworks in WEB Bereich zu arbeiten, welche uns viele M\u00f6glichkeiten anbieten und deswegen, dachten wir dass wir hier auch umsetzen k\u00f6nnten, aber das war nicht wirklich m\u00f6glich. Dashboard Vor-/Nachteile Vorteile Nachteile Schnellzugriff Mehrmals gleiche Aktion Z\u00e4hler Responsive Mockup Result Customers Vor-/Nachteile Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich ... Responsive Mockup Result Categories Vor-/Nachteile Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich ... Responsive Mockup Result Catalog Vor-/Nachteile Vorteile Nachteile Zugriff auf Produkte Mockup Result Orders Vor-/Nachteile Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich ... Responsive Mockup Result Products Vor-/Nachteile Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich .. Responsive Mockup Result Settings Vor-/Nachteile Vorteile Nachteile Diverse Einstellung auf eine Seite Mockup Result - Modal Forms Wir haben uns am Angang entschieden, alle Grids + Formulare auf ein Panel darzustellen. Im Verlauf von der Entwicklung haben wir nun gemerkt, dass das nicht so wirklich \u00fcbersichtlich ist. Deswegen haben wir uns dann entschieden, all die Formulare in einer separaten Modal Fenster anzuzeigen. Somit erreichen wir ein besseres Design f\u00fcr unsere Grid und die ADD und DELETE Operationen, k\u00f6nnen sauber \u00fcber dieses Modal Dialog gel\u00f6st werden. Beim Klicken auf \u00abAdd\u00bb wird das Formular gel\u00f6scht und eine neuen Datensatz kann erfasst werden. Wenn 1 Datensatz im Grid ausgew\u00e4hlt ist, dann kann man auf \u00abEdit\u00bb Button dr\u00fccken, das Modal wird ge\u00f6ffnet und die Felder werden mit der ausgew\u00e4hlte Datensatz gef\u00fcllt. Beim Speichern wird dann beachtet, ob die Datensatz bereits ein ID hat oder nicht. Falls ja, werden die Felder in der DB ge\u00e4ndert, falls nicht, wird eine neue Datensatz in der DB angelegt Add Mode Edi Mode","title":"03 UI"},{"location":"03UI/#03-ui","text":"","title":"03 UI"},{"location":"03UI/#mockups-vs-endergebnis","text":"Warum abweicht unser Endprodukt von erstellten Mockups? Am Anfang wollten wir ein einfaches Design f\u00fcr all die Views gestalten und mit Hilfe von verschiedener Farbe, die \u00abviews\u00bb unterscheiden. Jedoch haben wir schnell gemerkt, dass WindowsForms sehr limitiert ist. Sowohl ich als auch Raphael sind daran gewohnt mit guten Frameworks in WEB Bereich zu arbeiten, welche uns viele M\u00f6glichkeiten anbieten und deswegen, dachten wir dass wir hier auch umsetzen k\u00f6nnten, aber das war nicht wirklich m\u00f6glich.","title":"Mockups vs Endergebnis"},{"location":"03UI/#dashboard","text":"","title":"Dashboard"},{"location":"03UI/#vor-nachteile","text":"Vorteile Nachteile Schnellzugriff Mehrmals gleiche Aktion Z\u00e4hler Responsive Mockup Result","title":"Vor-/Nachteile"},{"location":"03UI/#customers","text":"","title":"Customers"},{"location":"03UI/#vor-nachteile_1","text":"Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich ... Responsive Mockup Result","title":"Vor-/Nachteile"},{"location":"03UI/#categories","text":"","title":"Categories"},{"location":"03UI/#vor-nachteile_2","text":"Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich ... Responsive Mockup Result","title":"Vor-/Nachteile"},{"location":"03UI/#catalog","text":"","title":"Catalog"},{"location":"03UI/#vor-nachteile_3","text":"Vorteile Nachteile Zugriff auf Produkte Mockup Result","title":"Vor-/Nachteile"},{"location":"03UI/#orders","text":"","title":"Orders"},{"location":"03UI/#vor-nachteile_4","text":"Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich ... Responsive Mockup Result","title":"Vor-/Nachteile"},{"location":"03UI/#products","text":"","title":"Products"},{"location":"03UI/#vor-nachteile_5","text":"Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich .. Responsive Mockup Result","title":"Vor-/Nachteile"},{"location":"03UI/#settings","text":"","title":"Settings"},{"location":"03UI/#vor-nachteile_6","text":"Vorteile Nachteile Diverse Einstellung auf eine Seite Mockup Result -","title":"Vor-/Nachteile"},{"location":"03UI/#modal-forms","text":"Wir haben uns am Angang entschieden, alle Grids + Formulare auf ein Panel darzustellen. Im Verlauf von der Entwicklung haben wir nun gemerkt, dass das nicht so wirklich \u00fcbersichtlich ist. Deswegen haben wir uns dann entschieden, all die Formulare in einer separaten Modal Fenster anzuzeigen. Somit erreichen wir ein besseres Design f\u00fcr unsere Grid und die ADD und DELETE Operationen, k\u00f6nnen sauber \u00fcber dieses Modal Dialog gel\u00f6st werden. Beim Klicken auf \u00abAdd\u00bb wird das Formular gel\u00f6scht und eine neuen Datensatz kann erfasst werden. Wenn 1 Datensatz im Grid ausgew\u00e4hlt ist, dann kann man auf \u00abEdit\u00bb Button dr\u00fccken, das Modal wird ge\u00f6ffnet und die Felder werden mit der ausgew\u00e4hlte Datensatz gef\u00fcllt. Beim Speichern wird dann beachtet, ob die Datensatz bereits ein ID hat oder nicht. Falls ja, werden die Felder in der DB ge\u00e4ndert, falls nicht, wird eine neue Datensatz in der DB angelegt Add Mode Edi Mode","title":"Modal Forms"},{"location":"04Erm/","text":"04 ERM Aufgrund der Vorgaben, wurde folgendes ERM entworfen und im EF Code-First Ansatz entwickelt.","title":"04 ERM"},{"location":"04Erm/#04-erm","text":"Aufgrund der Vorgaben, wurde folgendes ERM entworfen und im EF Code-First Ansatz entwickelt.","title":"04 ERM"},{"location":"05Architektur/","text":"05 Architektur Beispiel Customer Forms Forms sind Formulare, welche Textfelder enthalten, wo der User Daten eingeben kann. Diese Daten werden dann schlussendlich auf der Datenbank abgespeichert. 5.1.2 Views Auf den Views befindet sich jeweils lediglich ein Data-Grid-View welches Daten veranschaulicht. 5.1.3 Services F\u00fcr jedes Entity gibt es einen dazugeh\u00f6rigen Service. Diese bilden jeweils die Verbindung zum Repo ab. Dort drin gibt es jeweils Methoden wie z.B.: \u2022 GetAll() \u2022 GetByName(string name) \u2022 Add(Entity entity) \u2022 Delete(Entity entity) \u2022 Etc. Repos Die Repos stellen die Verbindung zur DB bzw. zum Context dar. DB-Entities Zuletzt findet man die DB-Entities, welche so auch im ERM wiederzufinden sind. Ausnahme Folgende Klasse ist eine Ausnahme und die findet man so nicht in der Datenbank. \u2022 YoyComparison In der Methode OnModelCreating() im DbContext wurde definiert, dass f\u00fcr diese Klasse keine Tabelle erzeugt werden soll: modelBuilder.Entity<YoyComparison>().HasNoKey().ToView(null); Diese Klasse wird lediglich als \u00abQuery-Objekt\u00bb verwendet. D.h. Diese Objekte werden nicht in der Datenbank gespeichert, aber wir ben\u00f6tigen sie als Objektstruktur f\u00fcr gewisse Queries und f\u00fcr die Darstellung im ViewYoyComparison.","title":"05 Architektur"},{"location":"05Architektur/#05-architektur","text":"","title":"05 Architektur"},{"location":"05Architektur/#beispiel-customer","text":"","title":"Beispiel Customer"},{"location":"05Architektur/#forms","text":"Forms sind Formulare, welche Textfelder enthalten, wo der User Daten eingeben kann. Diese Daten werden dann schlussendlich auf der Datenbank abgespeichert. 5.1.2 Views Auf den Views befindet sich jeweils lediglich ein Data-Grid-View welches Daten veranschaulicht. 5.1.3 Services F\u00fcr jedes Entity gibt es einen dazugeh\u00f6rigen Service. Diese bilden jeweils die Verbindung zum Repo ab. Dort drin gibt es jeweils Methoden wie z.B.: \u2022 GetAll() \u2022 GetByName(string name) \u2022 Add(Entity entity) \u2022 Delete(Entity entity) \u2022 Etc.","title":"Forms"},{"location":"05Architektur/#repos","text":"Die Repos stellen die Verbindung zur DB bzw. zum Context dar.","title":"Repos"},{"location":"05Architektur/#db-entities","text":"Zuletzt findet man die DB-Entities, welche so auch im ERM wiederzufinden sind.","title":"DB-Entities"},{"location":"05Architektur/#ausnahme","text":"Folgende Klasse ist eine Ausnahme und die findet man so nicht in der Datenbank. \u2022 YoyComparison In der Methode OnModelCreating() im DbContext wurde definiert, dass f\u00fcr diese Klasse keine Tabelle erzeugt werden soll: modelBuilder.Entity<YoyComparison>().HasNoKey().ToView(null); Diese Klasse wird lediglich als \u00abQuery-Objekt\u00bb verwendet. D.h. Diese Objekte werden nicht in der Datenbank gespeichert, aber wir ben\u00f6tigen sie als Objektstruktur f\u00fcr gewisse Queries und f\u00fcr die Darstellung im ViewYoyComparison.","title":"Ausnahme"},{"location":"06CTE/","text":"06 CTE \u2013 Categories View var query = @\";WITH RecurseTable \" + \"(ProductCategoryId, ProductCategoryName, ParentId, Level) \" + \"AS (SELECT \" + \"ProductCategoryId,\" + \"ProductCategoryName,\" + \"ISNULL(ParentId, 0),\" + \"0 AS Level \" + \"FROM ProductCategories \" + \"WHERE ParentId IS NULL \" + \"UNION ALL \" + \"SELECT \" + \"pcat.ProductCategoryId,\" + \"pcat.ProductCategoryName,\" + \"pcat.ParentId,\" + \"Level + 1 \" + \"FROM ProductCategories AS pcat \" + \"INNER JOIN RecurseTable AS rec \" + \"ON rec.ProductCategoryId = pcat.ParentId \" + \") \" + \"SELECT \" + \"ProductCategoryId,\" + \"ProductCategoryName,\" + \"ParentId,\" + \"Level \" + \"FROM RecurseTable\"; Die Aufruft von C# code erfolgt mit als Query string mit Hilfe von EntityFrameworkCore. Danach erhalten wir als Ergebnis eine Tabelle mit ID der Kategory, Beschreibung, ParentID, welche Identifiziert zu welche \u00fcbergeordnet Kategorie diese Kategorie geh\u00f6rt und als letzten mit \u00abLevel\u00bb wird angezeigt zu welchem Level sich diese Kategorie geh\u00f6rt. Danach wird diese Liste iteriert. Als erstes nimmt man ein Node vom Level 0 und dann werden alle items mit dem gleichen ParentID zu diesen Node hinzugef\u00fcgt bis alle items in der TreeView hinzugef\u00fcgt wurden.","title":"06 CTE \u2013 Categories View"},{"location":"06CTE/#06-cte-categories-view","text":"var query = @\";WITH RecurseTable \" + \"(ProductCategoryId, ProductCategoryName, ParentId, Level) \" + \"AS (SELECT \" + \"ProductCategoryId,\" + \"ProductCategoryName,\" + \"ISNULL(ParentId, 0),\" + \"0 AS Level \" + \"FROM ProductCategories \" + \"WHERE ParentId IS NULL \" + \"UNION ALL \" + \"SELECT \" + \"pcat.ProductCategoryId,\" + \"pcat.ProductCategoryName,\" + \"pcat.ParentId,\" + \"Level + 1 \" + \"FROM ProductCategories AS pcat \" + \"INNER JOIN RecurseTable AS rec \" + \"ON rec.ProductCategoryId = pcat.ParentId \" + \") \" + \"SELECT \" + \"ProductCategoryId,\" + \"ProductCategoryName,\" + \"ParentId,\" + \"Level \" + \"FROM RecurseTable\"; Die Aufruft von C# code erfolgt mit als Query string mit Hilfe von EntityFrameworkCore. Danach erhalten wir als Ergebnis eine Tabelle mit ID der Kategory, Beschreibung, ParentID, welche Identifiziert zu welche \u00fcbergeordnet Kategorie diese Kategorie geh\u00f6rt und als letzten mit \u00abLevel\u00bb wird angezeigt zu welchem Level sich diese Kategorie geh\u00f6rt. Danach wird diese Liste iteriert. Als erstes nimmt man ein Node vom Level 0 und dann werden alle items mit dem gleichen ParentID zu diesen Node hinzugef\u00fcgt bis alle items in der TreeView hinzugef\u00fcgt wurden.","title":"06 CTE \u2013 Categories View"},{"location":"07YOY/","text":"07 YOY Comparison Query Der Jahresvergleich wurde mit SqlRaw umgesetzt. Es w\u00e4re zwar eleganter die Abfrage mit Linq umzusetzen, da wir jetzt diverse \u00abMagic Strings\u00bb haben, aber es war im Auftrag nicht vorgegeben und wir wussten nicht genau, wie man so eine Komplexe Abfrage mit Linq nachbilden kann. SELECT Concat(Datepart(yyyy, o.orderdate), ' Q', Datepart(qq, o.orderdate)) AS Quarter, Count(o.orderid) AS CountOrders, Avg(od.quantity) AS AvgCountProductsPerOrder, Sum(od.quantity * p.price) AS TotalRevenue FROM orders o INNER JOIN orderdetails od ON o.orderid = od.orderid INNER JOIN products p ON p.productid = od.productid INNER JOIN productcategories pc ON pc.productcategoryid = p.productcategoryid WHERE Datediff(year, orderdate, Getdate()) <= 3 GROUP BY Concat(Datepart(yyyy, o.orderdate), ' Q', Datepart(qq, o.orderdate)) ORDER BY Concat(Datepart(yyyy, o.orderdate), ' Q', Datepart(qq, o.orderdate)) DESC; Klasse F\u00fcr die einzelnen Spalten wurde eine Klasse erstellt: public class YoyComparison { public string Quarter { get; set; } public int CountOrders { get; set; } public int AvgCountProductsPerOrder { get; set; } public double TotalRevenue { get; set; } } Im DBContext haben wir definiert, dass f\u00fcr diese Klasse keine Tabelle generiert werden soll, da wir die Klasse nur als Objekt-Struktur f\u00fcr die Abfrage und f\u00fcr die Darstellung im DataGridView ben\u00f6tigen.","title":"07 YOY Comparison"},{"location":"07YOY/#07-yoy-comparison","text":"","title":"07 YOY Comparison"},{"location":"07YOY/#query","text":"Der Jahresvergleich wurde mit SqlRaw umgesetzt. Es w\u00e4re zwar eleganter die Abfrage mit Linq umzusetzen, da wir jetzt diverse \u00abMagic Strings\u00bb haben, aber es war im Auftrag nicht vorgegeben und wir wussten nicht genau, wie man so eine Komplexe Abfrage mit Linq nachbilden kann. SELECT Concat(Datepart(yyyy, o.orderdate), ' Q', Datepart(qq, o.orderdate)) AS Quarter, Count(o.orderid) AS CountOrders, Avg(od.quantity) AS AvgCountProductsPerOrder, Sum(od.quantity * p.price) AS TotalRevenue FROM orders o INNER JOIN orderdetails od ON o.orderid = od.orderid INNER JOIN products p ON p.productid = od.productid INNER JOIN productcategories pc ON pc.productcategoryid = p.productcategoryid WHERE Datediff(year, orderdate, Getdate()) <= 3 GROUP BY Concat(Datepart(yyyy, o.orderdate), ' Q', Datepart(qq, o.orderdate)) ORDER BY Concat(Datepart(yyyy, o.orderdate), ' Q', Datepart(qq, o.orderdate)) DESC;","title":"Query"},{"location":"07YOY/#klasse","text":"F\u00fcr die einzelnen Spalten wurde eine Klasse erstellt: public class YoyComparison { public string Quarter { get; set; } public int CountOrders { get; set; } public int AvgCountProductsPerOrder { get; set; } public double TotalRevenue { get; set; } } Im DBContext haben wir definiert, dass f\u00fcr diese Klasse keine Tabelle generiert werden soll, da wir die Klasse nur als Objekt-Struktur f\u00fcr die Abfrage und f\u00fcr die Darstellung im DataGridView ben\u00f6tigen.","title":"Klasse"},{"location":"08Bills/","text":"08 Bills Zuerst haben wir das DataGridView f\u00fcr die Bills nur an ein Tabellen-\u00dcbergreifendes Query gebunden. Dann haben wir allerdings bemerkt, dass die Anforderung der nachvollziehbaren Adress\u00e4nderung nicht erf\u00fcllt wird. Weil wenn man die Adresse eines Kunden ge\u00e4ndert hat, hat sich auch die Adresse in den Bills ge\u00e4ndert, da es ja nur eine Tabellen\u00fcbergreifende Abfrage war. Aufgrund dessen haben wir, wie man im ERM sehen kann, eine Tabelle f\u00fcr die Bills erstellt. Somit werden jetzt auch Rechnungen persistiert und man kann Adress\u00e4nderungen nachvollziehen. Netto Brutto Berechnung Damit wir den Netto und Brutto Preis berechnen k\u00f6nnen, haben wir bei jedem Order-Objekt eine \u00abTax\u00bb definiert. double netto = 0; foreach (var orderDetail in orderDetails) { netto += orderDetail.Quantity * orderDetail.Product.Price; } var brutto = netto * (order.Tax / 100) + netto; Add(new Bill(customerId, firstName, lastName, street, streetNr, zip, city, country, orderDate, orderId, netto, brutto))","title":"08 Bills"},{"location":"08Bills/#08-bills","text":"Zuerst haben wir das DataGridView f\u00fcr die Bills nur an ein Tabellen-\u00dcbergreifendes Query gebunden. Dann haben wir allerdings bemerkt, dass die Anforderung der nachvollziehbaren Adress\u00e4nderung nicht erf\u00fcllt wird. Weil wenn man die Adresse eines Kunden ge\u00e4ndert hat, hat sich auch die Adresse in den Bills ge\u00e4ndert, da es ja nur eine Tabellen\u00fcbergreifende Abfrage war. Aufgrund dessen haben wir, wie man im ERM sehen kann, eine Tabelle f\u00fcr die Bills erstellt. Somit werden jetzt auch Rechnungen persistiert und man kann Adress\u00e4nderungen nachvollziehen.","title":"08 Bills"},{"location":"08Bills/#netto-brutto-berechnung","text":"Damit wir den Netto und Brutto Preis berechnen k\u00f6nnen, haben wir bei jedem Order-Objekt eine \u00abTax\u00bb definiert. double netto = 0; foreach (var orderDetail in orderDetails) { netto += orderDetail.Quantity * orderDetail.Product.Price; } var brutto = netto * (order.Tax / 100) + netto; Add(new Bill(customerId, firstName, lastName, street, streetNr, zip, city, country, orderDate, orderId, netto, brutto))","title":"Netto Brutto Berechnung"},{"location":"09EmailValidation/","text":"09 Email Validation F\u00fcr die Email Validierung wird System.Net.Mail.MailAddress verwendet. public bool IsValidEmailAddress(string email) { try { var addr = new System.Net.Mail.MailAddress(email); return addr.Address == email; } catch { return false; } } Dokumentation: https://docs.microsoft.com/en-us/dotnet/api/system.net.mail.mailaddress?view=net-5.0","title":"09 Email Validation"},{"location":"09EmailValidation/#09-email-validation","text":"F\u00fcr die Email Validierung wird System.Net.Mail.MailAddress verwendet. public bool IsValidEmailAddress(string email) { try { var addr = new System.Net.Mail.MailAddress(email); return addr.Address == email; } catch { return false; } } Dokumentation: https://docs.microsoft.com/en-us/dotnet/api/system.net.mail.mailaddress?view=net-5.0","title":"09 Email Validation"}]}
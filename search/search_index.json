{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Applikation_Inbetriebnahme/","text":"Architektur Beispiel Customer","title":"Architektur"},{"location":"Applikation_Inbetriebnahme/#architektur","text":"","title":"Architektur"},{"location":"Applikation_Inbetriebnahme/#beispiel-customer","text":"","title":"Beispiel Customer"},{"location":"Architektur/","text":"ERM Aufgrund der Vorgaben, wurde folgendes ERM entworfen und im EF Code-First Ansatz entwickelt.","title":"ERM"},{"location":"Architektur/#erm","text":"Aufgrund der Vorgaben, wurde folgendes ERM entworfen und im EF Code-First Ansatz entwickelt.","title":"ERM"},{"location":"Bills/","text":"Bills Zuerst haben wir das DataGridView f\u00fcr die Bills nur an ein Tabellen-\u00dcbergreifendes Query gebunden. Dann haben wir allerdings bemerkt, dass die Anforderung der nachvollziehbaren Adress\u00e4nderung nicht erf\u00fcllt wird. Weil wenn man die Adresse eines Kunden ge\u00e4ndert hat, hat sich auch die Adresse in den Bills ge\u00e4ndert, da es ja nur eine Tabellen\u00fcbergreifende Abfrage war. Aufgrund dessen haben wir, wie man im ERM sehen kann, eine Tabelle f\u00fcr die Bills erstellt. Somit werden jetzt auch Rechnungen persistiert und man kann Adress\u00e4nderungen nachvollziehen. Netto Brutto Berechnung Damit wir den Netto und Brutto Preis berechnen k\u00f6nnen, haben wir bei jedem Order-Objekt eine \u00abTax\u00bb definiert. double netto = 0; foreach (var orderDetail in orderDetails) { netto += orderDetail.Quantity * orderDetail.Product.Price; } var brutto = netto * (order.Tax / 100) + netto; Add(new Bill(customerId, firstName, lastName, street, streetNr, zip, city, country, orderDate, orderId, netto, brutto))","title":"Bills"},{"location":"Bills/#bills","text":"Zuerst haben wir das DataGridView f\u00fcr die Bills nur an ein Tabellen-\u00dcbergreifendes Query gebunden. Dann haben wir allerdings bemerkt, dass die Anforderung der nachvollziehbaren Adress\u00e4nderung nicht erf\u00fcllt wird. Weil wenn man die Adresse eines Kunden ge\u00e4ndert hat, hat sich auch die Adresse in den Bills ge\u00e4ndert, da es ja nur eine Tabellen\u00fcbergreifende Abfrage war. Aufgrund dessen haben wir, wie man im ERM sehen kann, eine Tabelle f\u00fcr die Bills erstellt. Somit werden jetzt auch Rechnungen persistiert und man kann Adress\u00e4nderungen nachvollziehen.","title":"Bills"},{"location":"Bills/#netto-brutto-berechnung","text":"Damit wir den Netto und Brutto Preis berechnen k\u00f6nnen, haben wir bei jedem Order-Objekt eine \u00abTax\u00bb definiert. double netto = 0; foreach (var orderDetail in orderDetails) { netto += orderDetail.Quantity * orderDetail.Product.Price; } var brutto = netto * (order.Tax / 100) + netto; Add(new Bill(customerId, firstName, lastName, street, streetNr, zip, city, country, orderDate, orderId, netto, brutto))","title":"Netto Brutto Berechnung"},{"location":"CTE/","text":"ERM Aufgrund der Vorgaben, wurde folgendes ERM entworfen und im EF Code-First Ansatz entwickelt.","title":"ERM"},{"location":"CTE/#erm","text":"Aufgrund der Vorgaben, wurde folgendes ERM entworfen und im EF Code-First Ansatz entwickelt.","title":"ERM"},{"location":"Einfuehrung/","text":"","title":"Einfuehrung"},{"location":"EmailValidation/","text":"Bills Zuerst haben wir das DataGridView f\u00fcr die Bills nur an ein Tabellen-\u00dcbergreifendes Query gebunden. Dann haben wir allerdings bemerkt, dass die Anforderung der nachvollziehbaren Adress\u00e4nderung nicht erf\u00fcllt wird. Weil wenn man die Adresse eines Kunden ge\u00e4ndert hat, hat sich auch die Adresse in den Bills ge\u00e4ndert, da es ja nur eine Tabellen\u00fcbergreifende Abfrage war. Aufgrund dessen haben wir, wie man im ERM sehen kann, eine Tabelle f\u00fcr die Bills erstellt. Somit werden jetzt auch Rechnungen persistiert und man kann Adress\u00e4nderungen nachvollziehen. Netto Brutto Berechnung Damit wir den Netto und Brutto Preis berechnen k\u00f6nnen, haben wir bei jedem Order-Objekt eine \u00abTax\u00bb definiert. double netto = 0; foreach (var orderDetail in orderDetails) { netto += orderDetail.Quantity * orderDetail.Product.Price; } var brutto = netto * (order.Tax / 100) + netto; Add(new Bill(customerId, firstName, lastName, street, streetNr, zip, city, country, orderDate, orderId, netto, brutto))","title":"Bills"},{"location":"EmailValidation/#bills","text":"Zuerst haben wir das DataGridView f\u00fcr die Bills nur an ein Tabellen-\u00dcbergreifendes Query gebunden. Dann haben wir allerdings bemerkt, dass die Anforderung der nachvollziehbaren Adress\u00e4nderung nicht erf\u00fcllt wird. Weil wenn man die Adresse eines Kunden ge\u00e4ndert hat, hat sich auch die Adresse in den Bills ge\u00e4ndert, da es ja nur eine Tabellen\u00fcbergreifende Abfrage war. Aufgrund dessen haben wir, wie man im ERM sehen kann, eine Tabelle f\u00fcr die Bills erstellt. Somit werden jetzt auch Rechnungen persistiert und man kann Adress\u00e4nderungen nachvollziehen.","title":"Bills"},{"location":"EmailValidation/#netto-brutto-berechnung","text":"Damit wir den Netto und Brutto Preis berechnen k\u00f6nnen, haben wir bei jedem Order-Objekt eine \u00abTax\u00bb definiert. double netto = 0; foreach (var orderDetail in orderDetails) { netto += orderDetail.Quantity * orderDetail.Product.Price; } var brutto = netto * (order.Tax / 100) + netto; Add(new Bill(customerId, firstName, lastName, street, streetNr, zip, city, country, orderDate, orderId, netto, brutto))","title":"Netto Brutto Berechnung"},{"location":"Erm/","text":"ERM Aufgrund der Vorgaben, wurde folgendes ERM entworfen und im EF Code-First Ansatz entwickelt.","title":"ERM"},{"location":"Erm/#erm","text":"Aufgrund der Vorgaben, wurde folgendes ERM entworfen und im EF Code-First Ansatz entwickelt.","title":"ERM"},{"location":"UI/","text":"UI Mockups vs Endergebnis Warum abweicht unser Endprodukt von erstellten Mockups? Am Anfang wollten wir ein einfaches Design f\u00fcr all die Views gestalten und mit Hilfe von verschiedener Farbe, die \u00abviews\u00bb unterscheiden. Jedoch haben wir schnell gemerkt, dass WindowsForms sehr limitiert ist. Sowohl ich als auch Raphael sind daran gewohnt mit guten Frameworks in WEB Bereich zu arbeiten, welche uns viele M\u00f6glichkeiten anbieten und deswegen, dachten wir dass wir hier auch umsetzen k\u00f6nnten, aber das war nicht wirklich m\u00f6glich. Dashboard Vor-/Nachteile Vorteile Nachteile Schnellzugriff Mehrmals gleiche Aktion Z\u00e4hler Responsive Mockup Result Customers Vor-/Nachteile Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich ... Responsive Mockup Result Categories Vor-/Nachteile Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich ... Responsive Mockup Result Catalog Vor-/Nachteile Vorteile Nachteile Zugriff auf Produkte Mockup Result Orders Vor-/Nachteile Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich ... Responsive Mockup Result Products Vor-/Nachteile Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich .. Responsive Mockup Result Settings Vor-/Nachteile Vorteile Nachteile Diverse Einstellung auf eine Seite Mockup Result - Modal Forms Wir haben uns am Angang entschieden, alle Grids + Formulare auf ein Panel darzustellen. Im Verlauf von der Entwicklung haben wir nun gemerkt, dass das nicht so wirklich \u00fcbersichtlich ist. Deswegen haben wir uns dann entschieden, all die Formulare in einer separaten Modal Fenster anzuzeigen. Somit erreichen wir ein besseres Design f\u00fcr unsere Grid und die ADD und DELETE Operationen, k\u00f6nnen sauber \u00fcber dieses Modal Dialog gel\u00f6st werden. Beim Klicken auf \u00abAdd\u00bb wird das Formular gel\u00f6scht und eine neuen Datensatz kann erfasst werden. Wenn 1 Datensatz im Grid ausgew\u00e4hlt ist, dann kann man auf \u00abEdit\u00bb Button dr\u00fccken, das Modal wird ge\u00f6ffnet und die Felder werden mit der ausgew\u00e4hlte Datensatz gef\u00fcllt. Beim Speichern wird dann beachtet, ob die Datensatz bereits ein ID hat oder nicht. Falls ja, werden die Felder in der DB ge\u00e4ndert, falls nicht, wird eine neue Datensatz in der DB angelegt Add Mode Edi Mode","title":"UI"},{"location":"UI/#ui","text":"","title":"UI"},{"location":"UI/#mockups-vs-endergebnis","text":"Warum abweicht unser Endprodukt von erstellten Mockups? Am Anfang wollten wir ein einfaches Design f\u00fcr all die Views gestalten und mit Hilfe von verschiedener Farbe, die \u00abviews\u00bb unterscheiden. Jedoch haben wir schnell gemerkt, dass WindowsForms sehr limitiert ist. Sowohl ich als auch Raphael sind daran gewohnt mit guten Frameworks in WEB Bereich zu arbeiten, welche uns viele M\u00f6glichkeiten anbieten und deswegen, dachten wir dass wir hier auch umsetzen k\u00f6nnten, aber das war nicht wirklich m\u00f6glich.","title":"Mockups vs Endergebnis"},{"location":"UI/#dashboard","text":"","title":"Dashboard"},{"location":"UI/#vor-nachteile","text":"Vorteile Nachteile Schnellzugriff Mehrmals gleiche Aktion Z\u00e4hler Responsive Mockup Result","title":"Vor-/Nachteile"},{"location":"UI/#customers","text":"","title":"Customers"},{"location":"UI/#vor-nachteile_1","text":"Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich ... Responsive Mockup Result","title":"Vor-/Nachteile"},{"location":"UI/#categories","text":"","title":"Categories"},{"location":"UI/#vor-nachteile_2","text":"Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich ... Responsive Mockup Result","title":"Vor-/Nachteile"},{"location":"UI/#catalog","text":"","title":"Catalog"},{"location":"UI/#vor-nachteile_3","text":"Vorteile Nachteile Zugriff auf Produkte Mockup Result","title":"Vor-/Nachteile"},{"location":"UI/#orders","text":"","title":"Orders"},{"location":"UI/#vor-nachteile_4","text":"Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich ... Responsive Mockup Result","title":"Vor-/Nachteile"},{"location":"UI/#products","text":"","title":"Products"},{"location":"UI/#vor-nachteile_5","text":"Vorteile Nachteile Keine Zus\u00e4tzliche Fenster Un\u00fcbersichtlich .. Responsive Mockup Result","title":"Vor-/Nachteile"},{"location":"UI/#settings","text":"","title":"Settings"},{"location":"UI/#vor-nachteile_6","text":"Vorteile Nachteile Diverse Einstellung auf eine Seite Mockup Result -","title":"Vor-/Nachteile"},{"location":"UI/#modal-forms","text":"Wir haben uns am Angang entschieden, alle Grids + Formulare auf ein Panel darzustellen. Im Verlauf von der Entwicklung haben wir nun gemerkt, dass das nicht so wirklich \u00fcbersichtlich ist. Deswegen haben wir uns dann entschieden, all die Formulare in einer separaten Modal Fenster anzuzeigen. Somit erreichen wir ein besseres Design f\u00fcr unsere Grid und die ADD und DELETE Operationen, k\u00f6nnen sauber \u00fcber dieses Modal Dialog gel\u00f6st werden. Beim Klicken auf \u00abAdd\u00bb wird das Formular gel\u00f6scht und eine neuen Datensatz kann erfasst werden. Wenn 1 Datensatz im Grid ausgew\u00e4hlt ist, dann kann man auf \u00abEdit\u00bb Button dr\u00fccken, das Modal wird ge\u00f6ffnet und die Felder werden mit der ausgew\u00e4hlte Datensatz gef\u00fcllt. Beim Speichern wird dann beachtet, ob die Datensatz bereits ein ID hat oder nicht. Falls ja, werden die Felder in der DB ge\u00e4ndert, falls nicht, wird eine neue Datensatz in der DB angelegt Add Mode Edi Mode","title":"Modal Forms"},{"location":"Unser_Vorgehen/","text":"Unser Vorgehen Sourcecode Versionierung Uns war von Anfang an klar, dass wir den Sourcecode mit Git auf Github verwalten wollten. Kanban Als zus\u00e4tzliche Hilfe f\u00fcr die \u00dcbersicht der Tasks verwendeten wir ein Kanban-Board auf www.trello.com. Anfangs definierten wir einige Tasks und teilten sie einander zu. Die ersten Tasks waren: Ricardo: GIT Repo erstellen Ricardo: GUI Mockups erstellen Raphael: ERM erstellen Ricardo: Dashboard (Homescreen) erstellen Raphael: S\u00e4mtliche Entity Models erstellen Danach erstellten wir immer weitere Tasks, priorisierten sie und teilten sie einander zu. Dies ist nur ein kleiner Ausschnitt von unserem Kanban-Board:","title":"Unser Vorgehen"},{"location":"Unser_Vorgehen/#unser-vorgehen","text":"","title":"Unser Vorgehen"},{"location":"Unser_Vorgehen/#sourcecode-versionierung","text":"Uns war von Anfang an klar, dass wir den Sourcecode mit Git auf Github verwalten wollten.","title":"Sourcecode Versionierung"},{"location":"Unser_Vorgehen/#kanban","text":"Als zus\u00e4tzliche Hilfe f\u00fcr die \u00dcbersicht der Tasks verwendeten wir ein Kanban-Board auf www.trello.com. Anfangs definierten wir einige Tasks und teilten sie einander zu. Die ersten Tasks waren: Ricardo: GIT Repo erstellen Ricardo: GUI Mockups erstellen Raphael: ERM erstellen Ricardo: Dashboard (Homescreen) erstellen Raphael: S\u00e4mtliche Entity Models erstellen Danach erstellten wir immer weitere Tasks, priorisierten sie und teilten sie einander zu. Dies ist nur ein kleiner Ausschnitt von unserem Kanban-Board:","title":"Kanban"},{"location":"YOY/","text":"ERM Aufgrund der Vorgaben, wurde folgendes ERM entworfen und im EF Code-First Ansatz entwickelt.","title":"ERM"},{"location":"YOY/#erm","text":"Aufgrund der Vorgaben, wurde folgendes ERM entworfen und im EF Code-First Ansatz entwickelt.","title":"ERM"}]}